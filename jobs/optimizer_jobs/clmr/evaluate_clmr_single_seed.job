#!/bin/bash
#SBATCH --partition=gpu_h100
#SBATCH --gpus=1
#SBATCH --job-name=clmr
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=9
#SBATCH --mem=64GB
#SBATCH --time=02:00:00
#SBATCH --output=out/results/clmr_seed_${SEED}.log

module purge
module load 2023
module load Anaconda3/2023.07-2
module load CUDA/12.4.0

# Change to your project directory
cd $HOME/group_project/ai4mi_project/
source ai4mi/bin/activate

# Set wandb online
wandb online

# Get seed from environment variable
SEED=${SEED}
OPTIMIZER="clmr"

echo "=========================================="
echo "CLMR Optimizer - Single Seed Training & Evaluation"
echo "=========================================="
echo "Seed: ${SEED}"
echo "Optimizer: ${OPTIMIZER}"
echo "=========================================="

# Create training results directory
mkdir -p train_results/${OPTIMIZER}

# Train model for this seed
echo ""
echo "Step 1: Training model for seed ${SEED}..."
echo "----------------------------------------"

python -O main.py \
  --dataset SEGTHOR_CLEAN \
  --mode full \
  --epochs 25 \
  --dest train_results/${OPTIMIZER}/train_results_baseline_${SEED} \
  --gpu \
  --wandb_entity ai4med-team \
  --wandb_project final-project \
  --seed ${SEED} \
  --optimizer clmr \
  --grad_clip 0.5 \
  --wandb_name "clmr_seed_${SEED}"

if [ $? -eq 0 ]; then
    echo "✓ Training completed for seed ${SEED}"
else
    echo "✗ Training failed for seed ${SEED}"
    exit 1
fi

# Create evaluation directories
mkdir -p evaluation_results/${OPTIMIZER}/stitched_predictions
mkdir -p evaluation_results/${OPTIMIZER}/ground_truth
mkdir -p evaluation_results/${OPTIMIZER}/metrics

echo ""
echo "Step 2: Starting evaluation for CLMR optimizer with seed: ${SEED}"

# Prepare ground truth (only once, same for all seeds)
echo ""
echo "Step 3: Preparing ground truth..."
echo "--------------------------------"
python stitch.py \
  --data_folder data/SEGTHOR_CLEAN/val/gt \
  --dest_folder evaluation_results/${OPTIMIZER}/ground_truth \
  --num_classes 5 \
  --grp_regex "(Patient_\d\d)_\d\d\d\d" \
  --source_scan_pattern "data/segthor_fixed/train/{id_}/GT.nii.gz"

if [ $? -eq 0 ]; then
    echo "✓ Ground truth preparation completed"
else
    echo "✗ Ground truth preparation failed"
    exit 1
fi

# Stitch predictions for this seed
echo ""
echo "Step 4: Stitching predictions for seed ${SEED}..."
echo "------------------------------------------------"

# Check if source directory exists
source_dir="train_results/${OPTIMIZER}/train_results_baseline_${SEED}/best_epoch/val"
if [ ! -d "$source_dir" ]; then
    echo "Error: Source directory $source_dir does not exist"
    exit 1
fi

# Create seed-specific directory
mkdir -p evaluation_results/${OPTIMIZER}/stitched_predictions/seed_${SEED}

# Stitch predictions
python stitch.py \
  --data_folder "$source_dir" \
  --dest_folder evaluation_results/${OPTIMIZER}/stitched_predictions/seed_${SEED} \
  --num_classes 5 \
  --grp_regex "(Patient_\d\d)_\d\d\d\d" \
  --source_scan_pattern "data/segthor_train/train/{id_}/GT.nii.gz"

if [ $? -eq 0 ]; then
    echo "✓ Stitching completed for seed ${SEED}"
else
    echo "✗ Stitching failed for seed ${SEED}"
    exit 1
fi

# Compute metrics for this seed
echo ""
echo "Step 5: Computing metrics for seed ${SEED}..."
echo "---------------------------------------------"

# Check if stitched predictions exist
pred_dir="evaluation_results/${OPTIMIZER}/stitched_predictions/seed_${SEED}"
if [ ! -d "$pred_dir" ] || [ -z "$(ls -A $pred_dir 2>/dev/null)" ]; then
    echo "Error: No stitched predictions found for seed ${SEED}"
    exit 1
fi

# Create seed-specific metrics directory
mkdir -p evaluation_results/${OPTIMIZER}/metrics/seed_${SEED}

# Compute metrics
python /home/scur1622/group_project/ai4mi_project/distorch/compute_metrics.py \
  --ref_folder evaluation_results/${OPTIMIZER}/ground_truth \
  --pred_folder "$pred_dir" \
  --ref_extension .nii.gz \
  --pred_extension .nii.gz \
  --num_classes 5 \
  --metrics 3d_dice 3d_hd95 3d_jaccard 3d_assd \
  --save_folder evaluation_results/${OPTIMIZER}/metrics/seed_${SEED} \
  --overwrite

if [ $? -eq 0 ]; then
    echo "✓ Metrics computation completed for seed ${SEED}"
    
    # Log metrics to wandb using separate Python script
    echo "Logging metrics to wandb..."
    python /home/scur1622/group_project/ai4mi_project/jobs/optimizer_jobs/adamW/log_metrics_to_wandb.py \
      --seed ${SEED} \
      --optimizer ${OPTIMIZER} \
      --metrics_dir evaluation_results/${OPTIMIZER}/metrics/seed_${SEED}
else
    echo "✗ Metrics computation failed for seed ${SEED}"
    exit 1
fi

echo ""
echo "=========================================="
echo "Evaluation Summary for Seed ${SEED}"
echo "=========================================="
echo "Results saved in: evaluation_results/${OPTIMIZER}/"
echo "Ground truth: evaluation_results/${OPTIMIZER}/ground_truth/"
echo "Stitched predictions: evaluation_results/${OPTIMIZER}/stitched_predictions/seed_${SEED}/"
echo "Metrics: evaluation_results/${OPTIMIZER}/metrics/seed_${SEED}/"
echo "=========================================="

echo ""
echo "Evaluation completed for seed ${SEED}!"



